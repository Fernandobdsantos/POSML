{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM3wlbWo3V23MuqnA0QlhrO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Fernandobdsantos/POSML/blob/main/api_books_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install snowflake-connector-python[pandas] python-dotenv dotenv flask_ngrok"
      ],
      "metadata": {
        "id": "fbkPiIayLti-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install snowflake-connector-python[pandas] requests Flask snowflake-connector-python pyngrok\n",
        "print(\"Instalação das bibliotecas concluída.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FR2wEtT_ahxR",
        "outputId": "f16b1b3f-30dc-40ac-e332-41268f6091fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: Flask in /usr/local/lib/python3.11/dist-packages (3.1.1)\n",
            "Requirement already satisfied: snowflake-connector-python in /usr/local/lib/python3.11/dist-packages (3.15.0)\n",
            "Collecting pyngrok\n",
            "  Downloading pyngrok-7.2.11-py3-none-any.whl.metadata (9.4 kB)\n",
            "Requirement already satisfied: asn1crypto<2.0.0,>0.24.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (1.5.1)\n",
            "Requirement already satisfied: boto3>=1.24 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (1.38.43)\n",
            "Requirement already satisfied: botocore>=1.24 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (1.38.43)\n",
            "Requirement already satisfied: cffi<2.0.0,>=1.9 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (1.17.1)\n",
            "Requirement already satisfied: cryptography>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (43.0.3)\n",
            "Requirement already satisfied: pyOpenSSL<26.0.0,>=22.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (24.2.1)\n",
            "Requirement already satisfied: pyjwt<3.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (2.10.1)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (2025.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (24.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (2025.6.15)\n",
            "Requirement already satisfied: typing_extensions<5,>=4.3 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (4.14.0)\n",
            "Requirement already satisfied: filelock<4,>=3.5 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (3.18.0)\n",
            "Requirement already satisfied: sortedcontainers>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (2.4.0)\n",
            "Requirement already satisfied: platformdirs<5.0.0,>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (4.3.8)\n",
            "Requirement already satisfied: tomlkit in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (0.13.3)\n",
            "Requirement already satisfied: pandas<3.0.0,>=2.1.2 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (2.2.2)\n",
            "Requirement already satisfied: pyarrow<19.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python[pandas]) (18.1.0)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.4.0)\n",
            "Requirement already satisfied: blinker>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from Flask) (1.9.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask) (8.2.1)\n",
            "Requirement already satisfied: itsdangerous>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from Flask) (2.2.0)\n",
            "Requirement already satisfied: jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask) (3.1.6)\n",
            "Requirement already satisfied: markupsafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Flask) (3.0.2)\n",
            "Requirement already satisfied: werkzeug>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from Flask) (3.1.3)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from boto3>=1.24->snowflake-connector-python[pandas]) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.14.0,>=0.13.0 in /usr/local/lib/python3.11/dist-packages (from boto3>=1.24->snowflake-connector-python[pandas]) (0.13.0)\n",
            "Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.11/dist-packages (from botocore>=1.24->snowflake-connector-python[pandas]) (2.9.0.post0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi<2.0.0,>=1.9->snowflake-connector-python[pandas]) (2.22)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0.0,>=2.1.2->snowflake-connector-python[pandas]) (2.0.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0.0,>=2.1.2->snowflake-connector-python[pandas]) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore>=1.24->snowflake-connector-python[pandas]) (1.17.0)\n",
            "Downloading pyngrok-7.2.11-py3-none-any.whl (25 kB)\n",
            "Installing collected packages: pyngrok\n",
            "Successfully installed pyngrok-7.2.11\n",
            "Instalação das bibliotecas concluída.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jOxl3PblLJvl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1cb1c5ce-26ee-4d95-8905-de550d2d44c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: flask in /usr/local/lib/python3.11/dist-packages (3.1.1)\n",
            "Requirement already satisfied: snowflake-connector-python in /usr/local/lib/python3.11/dist-packages (3.15.0)\n",
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.11/dist-packages (7.2.11)\n",
            "Requirement already satisfied: blinker>=1.9.0 in /usr/local/lib/python3.11/dist-packages (from flask) (1.9.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from flask) (8.2.1)\n",
            "Requirement already satisfied: itsdangerous>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from flask) (2.2.0)\n",
            "Requirement already satisfied: jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from flask) (3.1.6)\n",
            "Requirement already satisfied: markupsafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from flask) (3.0.2)\n",
            "Requirement already satisfied: werkzeug>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from flask) (3.1.3)\n",
            "Requirement already satisfied: asn1crypto<2.0.0,>0.24.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (1.5.1)\n",
            "Requirement already satisfied: boto3>=1.24 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (1.38.43)\n",
            "Requirement already satisfied: botocore>=1.24 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (1.38.43)\n",
            "Requirement already satisfied: cffi<2.0.0,>=1.9 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (1.17.1)\n",
            "Requirement already satisfied: cryptography>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (43.0.3)\n",
            "Requirement already satisfied: pyOpenSSL<26.0.0,>=22.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (24.2.1)\n",
            "Requirement already satisfied: pyjwt<3.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (2.10.1)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (2025.2)\n",
            "Requirement already satisfied: requests<3.0.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (2.32.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (24.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (2025.6.15)\n",
            "Requirement already satisfied: typing_extensions<5,>=4.3 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (4.14.0)\n",
            "Requirement already satisfied: filelock<4,>=3.5 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (3.18.0)\n",
            "Requirement already satisfied: sortedcontainers>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (2.4.0)\n",
            "Requirement already satisfied: platformdirs<5.0.0,>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (4.3.8)\n",
            "Requirement already satisfied: tomlkit in /usr/local/lib/python3.11/dist-packages (from snowflake-connector-python) (0.13.3)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n",
            "Requirement already satisfied: jmespath<2.0.0,>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from boto3>=1.24->snowflake-connector-python) (1.0.1)\n",
            "Requirement already satisfied: s3transfer<0.14.0,>=0.13.0 in /usr/local/lib/python3.11/dist-packages (from boto3>=1.24->snowflake-connector-python) (0.13.0)\n",
            "Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.11/dist-packages (from botocore>=1.24->snowflake-connector-python) (2.9.0.post0)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.11/dist-packages (from botocore>=1.24->snowflake-connector-python) (2.4.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi<2.0.0,>=1.9->snowflake-connector-python) (2.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore>=1.24->snowflake-connector-python) (1.17.0)\n",
            "✅ Túnel do ngrok criado. Sua API está disponível publicamente em: NgrokTunnel: \"https://97fa-34-74-23-156.ngrok-free.app\" -> \"http://localhost:5000\"\n",
            " * Serving Flask app '__main__'\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n",
            " * Running on http://127.0.0.1:5000\n",
            "INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n",
            "INFO:werkzeug:127.0.0.1 - - [25/Jun/2025 17:41:32] \"GET / HTTP/1.1\" 200 -\n",
            "INFO:werkzeug:127.0.0.1 - - [25/Jun/2025 17:41:33] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n",
            "INFO:werkzeug:127.0.0.1 - - [25/Jun/2025 17:41:36] \"GET /books/all HTTP/1.1\" 200 -\n"
          ]
        }
      ],
      "source": [
        "# Célula 1: Instalar as dependências necessárias\n",
        "!pip install flask snowflake-connector-python pyngrok\n",
        "\n",
        "# Célula 2: Colar e rodar o código da sua API (TODAS AS ROTAS GERAM TABELAS)\n",
        "import os\n",
        "import pandas as pd\n",
        "# Adicionamos render_template_string para criar a página HTML\n",
        "from flask import Flask, jsonify, request, render_template_string\n",
        "from pyngrok import ngrok\n",
        "from snowflake.connector import connect\n",
        "from functools import lru_cache\n",
        "\n",
        "# --- Configuração da Aplicação Flask ---\n",
        "app = Flask(__name__)\n",
        "\n",
        "# --- Credenciais e Conexão com o Snowflake ---\n",
        "SNOWFLAKE_CONFIG = {\n",
        "    \"user\": \"fernando_bastos\",\n",
        "    \"password\": \"Tayane11031997\",\n",
        "    \"account\": \"ZAPPZJT-RCB40816\",\n",
        "    \"warehouse\": \"COMPUTE_WH\",\n",
        "    \"database\": \"DB_SCRAPE\",\n",
        "    \"schema\": \"SC_SCRAPE\"\n",
        "}\n",
        "\n",
        "# --- NOME DA SUA TABELA ---\n",
        "SNOWFLAKE_TABLE = \"TB_BOOKS_TO_SCRAPE\"\n",
        "\n",
        "# ------------------------------------------------------------------- #\n",
        "# --- TEMPLATES HTML REUTILIZÁVEIS ---\n",
        "# ------------------------------------------------------------------- #\n",
        "\n",
        "# Template principal para exibir listas de dados em uma tabela\n",
        "HTML_TABLE_TEMPLATE = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"pt-br\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>{{ title }}</title>\n",
        "    <style>\n",
        "        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f4f4f9; color: #333; margin: 0; padding: 20px; }\n",
        "        h1 { color: #333; text-align: center; margin-bottom: 25px;}\n",
        "        table { width: 100%; border-collapse: collapse; margin-top: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); background-color: #fff; border-radius: 8px; overflow: hidden; }\n",
        "        th, td { padding: 15px; border-bottom: 1px solid #ddd; text-align: left; }\n",
        "        thead { background-color: #007bff; color: white; text-transform: uppercase; font-size: 0.85em; letter-spacing: 0.05em;}\n",
        "        tr:nth-child(even) { background-color: #f8f9fa; }\n",
        "        tr:hover { background-color: #e9ecef; }\n",
        "        .container { max-width: 1200px; margin: auto; background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);}\n",
        "        p.error { text-align: center; color: #721c24; background-color: #f8d7da; padding: 15px; border: 1px solid #f5c6cb; border-radius: 5px;}\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "    <div class=\"container\">\n",
        "        <h1>{{ title }}</h1>\n",
        "        {% if data %}\n",
        "            <table>\n",
        "                <thead>\n",
        "                    <tr>\n",
        "                        {% for header in headers %}\n",
        "                            <th>{{ header }}</th>\n",
        "                        {% endfor %}\n",
        "                    </tr>\n",
        "                </thead>\n",
        "                <tbody>\n",
        "                    {% for row in data %}\n",
        "                    <tr>\n",
        "                        {% for header in headers %}\n",
        "                            <td>{{ row.get(header.replace(' ', '_').lower(), '') }}</td>\n",
        "                        {% endfor %}\n",
        "                    </tr>\n",
        "                    {% endfor %}\n",
        "                </tbody>\n",
        "            </table>\n",
        "        {% else %}\n",
        "            <p class=\"error\">Nenhum dado encontrado para os critérios fornecidos.</p>\n",
        "        {% endif %}\n",
        "    </div>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Template para a página de estatísticas gerais\n",
        "HTML_OVERVIEW_TEMPLATE = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"pt-br\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Estatísticas Gerais</title>\n",
        "    <style>\n",
        "        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f4f4f9; color: #333; margin: 0; padding: 20px; }\n",
        "        h1, h2 { color: #333; text-align: center; }\n",
        "        .container { max-width: 800px; margin: auto; background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);}\n",
        "        .stats-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; text-align: center;}\n",
        "        .stat-card { background-color: #f8f9fa; padding: 20px; border-radius: 8px; border: 1px solid #dee2e6;}\n",
        "        .stat-card h3 { margin-top: 0; color: #007bff; }\n",
        "        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n",
        "        th, td { padding: 12px; border-bottom: 1px solid #ddd; text-align: left; }\n",
        "        thead { background-color: #007bff; color: white; }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "    <div class=\"container\">\n",
        "        <h1>Estatísticas Gerais</h1>\n",
        "        {% if stats %}\n",
        "            <div class=\"stats-grid\">\n",
        "                <div class=\"stat-card\">\n",
        "                    <h3>Total de Livros</h3>\n",
        "                    <p>{{ stats.total_books }}</p>\n",
        "                </div>\n",
        "                <div class=\"stat-card\">\n",
        "                    <h3>Preço Médio</h3>\n",
        "                    <p>£ {{ \"%.2f\"|format(stats.average_price) }}</p>\n",
        "                </div>\n",
        "            </div>\n",
        "            <h2>Distribuição por Rating</h2>\n",
        "            <table>\n",
        "                <thead><tr><th>Rating</th><th>Quantidade de Livros</th></tr></thead>\n",
        "                <tbody>\n",
        "                    {% for item in stats.rating_distribution %}\n",
        "                    <tr><td>{{ item.rating }}</td><td>{{ item.count }}</td></tr>\n",
        "                    {% endfor %}\n",
        "                </tbody>\n",
        "            </table>\n",
        "        {% else %}\n",
        "            <p>Não foi possível carregar as estatísticas.</p>\n",
        "        {% endif %}\n",
        "    </div>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# --- Funções de Conexão e Consulta ---\n",
        "def get_snowflake_connection():\n",
        "    \"\"\"Estabelece uma conexão com o Snowflake.\"\"\"\n",
        "    try:\n",
        "        return connect(**SNOWFLAKE_CONFIG)\n",
        "    except Exception as e:\n",
        "        print(f\"Erro ao conectar ao Snowflake: {e}\")\n",
        "        return None\n",
        "\n",
        "@lru_cache(maxsize=32)\n",
        "def query_snowflake(query):\n",
        "    \"\"\"Executa uma consulta no Snowflake e retorna um DataFrame Pandas.\"\"\"\n",
        "    conn = get_snowflake_connection()\n",
        "    if not conn:\n",
        "        return pd.DataFrame()\n",
        "\n",
        "    try:\n",
        "        cursor = conn.cursor()\n",
        "        cursor.execute(query)\n",
        "        df = cursor.fetch_pandas_all()\n",
        "        # Garante que os nomes das colunas fiquem em minúsculas para o template\n",
        "        df.columns = df.columns.str.lower()\n",
        "        return df\n",
        "    except Exception as e:\n",
        "        print(f\"Erro ao executar a consulta no Snowflake: {e}\")\n",
        "        return pd.DataFrame()\n",
        "    finally:\n",
        "        if conn:\n",
        "            conn.close()\n",
        "\n",
        "# --- Endpoints da API (TODOS RETORNAM HTML) ---\n",
        "\n",
        "@app.route(\"/\")\n",
        "def index():\n",
        "    \"\"\"Página inicial com links para todas as visualizações.\"\"\"\n",
        "    try:\n",
        "        public_url = ngrok.get_tunnels()[0].public_url\n",
        "        links_html = f\"\"\"\n",
        "        <h1>API de Livros - Visualizações</h1>\n",
        "        <p>Use os links abaixo para visualizar os dados em tabelas:</p>\n",
        "        <ul>\n",
        "            <li><a href=\"{public_url}/stats/overview\">Estatísticas Gerais</a></li>\n",
        "            <li><a href=\"{public_url}/stats/categories\">Estatísticas por Categoria</a></li>\n",
        "            <li><a href=\"{public_url}/books/all\">Ver Todos os Livros</a></li>\n",
        "            <li><a href=\"{public_url}/books/top-rated?limit=10\">Top 10 Livros Mais Bem Avaliados</a></li>\n",
        "        </ul>\n",
        "        <p>Você também pode usar os endpoints com parâmetros, como:</p>\n",
        "        <ul>\n",
        "            <li><code>{public_url}/books/price-range?min=10&max=20</code></li>\n",
        "            <li><code>{public_url}/books/search?category=Music</code></li>\n",
        "        </ul>\n",
        "        \"\"\"\n",
        "        return links_html\n",
        "    except IndexError:\n",
        "        return \"API de Livros iniciando, o túnel do ngrok ainda não está pronto.\"\n",
        "\n",
        "@app.route('/stats/overview')\n",
        "def get_overview_stats():\n",
        "    \"\"\"Retorna uma página HTML com as estatísticas gerais.\"\"\"\n",
        "    query = f\"\"\"\n",
        "    SELECT\n",
        "        COUNT(*) as total_books,\n",
        "        rating,\n",
        "        COUNT(*) as rating_count\n",
        "    FROM {SNOWFLAKE_TABLE}\n",
        "    GROUP BY rating\n",
        "    ORDER BY rating DESC\n",
        "    \"\"\"\n",
        "    df = query_snowflake(query)\n",
        "\n",
        "    if df.empty:\n",
        "        return render_template_string(HTML_OVERVIEW_TEMPLATE, stats=None)\n",
        "\n",
        "    total_books = int(df['total_books'].sum())\n",
        "    avg_price_query = f\"SELECT AVG(price::FLOAT) as avg_price FROM {SNOWFLAKE_TABLE}\"\n",
        "    avg_df = query_snowflake(avg_price_query)\n",
        "    average_price = round(float(avg_df['avg_price'].iloc[0]), 2) if not avg_df.empty else 0.0\n",
        "\n",
        "    rating_dist = df.rename(columns={\"rating_count\": \"count\"}).to_dict('records')\n",
        "\n",
        "    result = {\n",
        "        \"total_books\": total_books,\n",
        "        \"average_price\": average_price,\n",
        "        \"rating_distribution\": rating_dist\n",
        "    }\n",
        "    return render_template_string(HTML_OVERVIEW_TEMPLATE, stats=result)\n",
        "\n",
        "@app.route('/stats/categories')\n",
        "def get_category_stats():\n",
        "    \"\"\"Retorna uma tabela HTML com estatísticas por categoria.\"\"\"\n",
        "    query = f\"\"\"\n",
        "    SELECT\n",
        "        category,\n",
        "        COUNT(*) as book_count,\n",
        "        AVG(price::FLOAT) as avg_price,\n",
        "        MIN(price::FLOAT) as min_price,\n",
        "        MAX(price::FLOAT) as max_price\n",
        "    FROM {SNOWFLAKE_TABLE}\n",
        "    GROUP BY category\n",
        "    ORDER BY book_count DESC\n",
        "    \"\"\"\n",
        "    df = query_snowflake(query)\n",
        "    headers = [\"Category\", \"Book Count\", \"Avg Price\", \"Min Price\", \"Max Price\"]\n",
        "    return render_template_string(HTML_TABLE_TEMPLATE, title=\"Estatísticas por Categoria\", headers=headers, data=df.to_dict('records'))\n",
        "\n",
        "@app.route('/books/all')\n",
        "def view_all_books_table():\n",
        "    \"\"\"Busca todos os livros e os exibe em uma tabela HTML.\"\"\"\n",
        "    query = f\"SELECT id, title, price, rating, category, availability FROM {SNOWFLAKE_TABLE}\"\n",
        "    df = query_snowflake(query)\n",
        "    headers = [\"ID\", \"Title\", \"Price\", \"Rating\", \"Category\", \"Availability\"]\n",
        "    return render_template_string(HTML_TABLE_TEMPLATE, title=\"Catálogo de Livros \", headers=headers, data=df.to_dict('records'))\n",
        "\n",
        "@app.route('/books/top-rated')\n",
        "def get_top_rated_books():\n",
        "    \"\"\"Retorna uma tabela HTML com os livros mais bem avaliados.\"\"\"\n",
        "    limit = request.args.get('limit', 10, type=int)\n",
        "    query = f\"SELECT title, price, rating, availability, category FROM {SNOWFLAKE_TABLE} ORDER BY rating DESC, price ASC LIMIT {limit}\"\n",
        "    df = query_snowflake(query)\n",
        "    headers = [\"Title\", \"Price\", \"Rating\", \"Availability\", \"Category\"]\n",
        "    return render_template_string(HTML_TABLE_TEMPLATE, title=f\"Top {limit} Livros Mais Bem Avaliados\", headers=headers, data=df.to_dict('records'))\n",
        "\n",
        "@app.route('/books/price-range')\n",
        "def get_books_by_price_range():\n",
        "    \"\"\"Retorna uma tabela HTML com livros em uma faixa de preço.\"\"\"\n",
        "    min_price = request.args.get('min', type=float)\n",
        "    max_price = request.args.get('max', type=float)\n",
        "\n",
        "    if min_price is None or max_price is None:\n",
        "        return \"<p>Erro: Parâmetros 'min' e 'max' são obrigatórios.</p>\", 400\n",
        "\n",
        "    query = f\"SELECT title, price, rating, availability, category FROM {SNOWFLAKE_TABLE} WHERE price::FLOAT BETWEEN {min_price} AND {max_price} ORDER BY price ASC\"\n",
        "    df = query_snowflake(query)\n",
        "    headers = [\"Title\", \"Price\", \"Rating\", \"Availability\", \"Category\"]\n",
        "    return render_template_string(HTML_TABLE_TEMPLATE, title=f\"Livros com Preço entre £{min_price} e £{max_price}\", headers=headers, data=df.to_dict('records'))\n",
        "\n",
        "@app.route('/books/search')\n",
        "def search_books():\n",
        "    \"\"\"Retorna uma tabela HTML com os resultados da busca.\"\"\"\n",
        "    title_q = request.args.get('title', default=\"\", type=str).lower().strip()\n",
        "    category_q = request.args.get('category', default=\"\", type=str).lower().strip()\n",
        "\n",
        "    if not title_q and not category_q:\n",
        "        return \"<p>Erro: Forneça pelo menos um critério de busca: 'title' ou 'category'.</p>\", 400\n",
        "\n",
        "    base_query = f\"SELECT title, price, rating, availability, category FROM {SNOWFLAKE_TABLE} WHERE 1=1\"\n",
        "    filters = []\n",
        "    if title_q:\n",
        "        filters.append(f\" AND LOWER(title) LIKE '%{title_q}%'\")\n",
        "    if category_q:\n",
        "        filters.append(f\" AND LOWER(category) LIKE '%{category_q}%'\")\n",
        "\n",
        "    query = base_query + \"\".join(filters) + \" ORDER BY rating DESC, price ASC LIMIT 100\"\n",
        "    df = query_snowflake(query)\n",
        "    headers = [\"Title\", \"Price\", \"Rating\", \"Availability\", \"Category\"]\n",
        "    return render_template_string(HTML_TABLE_TEMPLATE, title=f\"Resultados da Busca\", headers=headers, data=df.to_dict('records'))\n",
        "\n",
        "\n",
        "# --- Bloco de Execução Principal ---\n",
        "if __name__ == '__main__':\n",
        "    NGROK_AUTH_TOKEN = \"2z0GWYxIBlOVHeERUJs3pk1bh9V_vaR3LoXVFq31HC5PUqW1\"\n",
        "    os.environ[\"NGROK_AUTH_TOKEN\"] = NGROK_AUTH_TOKEN\n",
        "\n",
        "    try:\n",
        "        # --- CORREÇÃO APLICADA AQUI ---\n",
        "        # Desconecta túneis ativos antes de criar um novo.\n",
        "        # Isso evita erros se você rodar a célula várias vezes.\n",
        "        for tunnel in ngrok.get_tunnels():\n",
        "            ngrok.disconnect(tunnel.public_url)\n",
        "            print(f\"Túnel {tunnel.public_url} desconectado.\")\n",
        "\n",
        "        ngrok.set_auth_token(os.environ[\"NGROK_AUTH_TOKEN\"])\n",
        "        public_url = ngrok.connect(5000)\n",
        "        print(f\"✅ Túnel do ngrok criado. Sua API está disponível publicamente em: {public_url}\")\n",
        "        app.run(port=5000)\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Ocorreu um erro ao iniciar o ngrok ou o Flask: {e}\")\n",
        "        if \"authentication failed\" in str(e):\n",
        "             print(\"\\n➡️ DICA: O token fornecido é inválido. Vá ao seu dashboard do ngrok, resete seu token e cole o novo no código.\")\n"
      ]
    }
  ]
}